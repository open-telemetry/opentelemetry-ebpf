# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

name: build-and-test
run-name: ${{ github.actor }} is running  GitHub Actions
on:
  push:
    branches:
      - main
  pull_request:
    paths:

env:
  BENV_IMAGE: quay.io/splunko11ytest/network-explorer-debug/build-env

concurrency:
  group: build-and-test-${{ github.event.pull_request_number || github.ref }}
  cancel-in-progress: true

jobs:
  clang-format-check:
    runs-on: ubuntu-20.04
    name: clang-format-check

    steps:
    - name: Print github workspace
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        echo "pr.ref = ${{github.event.pull_request.head.ref}}"
        echo "github.ref = ${{ github.ref }}"
        echo "$GITHUB_CONTEXT"

    - name: Check out the codebase
      uses: actions/checkout@v3

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Runs format checker
      run: |
        sudo apt update
        sudo apt install -y clang-format-11
        cd ${{ github.workspace }}
        ./.github/workflows/scripts/check-clang-format.sh

    outputs:
      date: ${{ steps.date.outputs.date }}

  build-and-push-reducer:
    name: build-and-push-reducer
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build-and-push-reducer
      env:
        PASS: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $BENV_IMAGE
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/root/src \
        $BENV_IMAGE \
        ./build.sh reducer

  build-and-push-kernel-collector:
    name: build-and-push-kernel-collector
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build-and-push-kernel-collector
      env:
        PASS: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/root/src \
        $BENV_IMAGE \
        ./build.sh kernel-collector

  build-k8s-relay:
    name: build-k8s-relay
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build k8s-relay
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/root/src \
        $BENV_IMAGE \
        ./build.sh k8s-relay

  build-cloud-collector:
    name: build-cloud-collector
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build cloud-collector
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/root/src \
        $BENV_IMAGE \
        ./build.sh cloud-collector

  build-k8s-watcher:
    name: build-k8s-watcher
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build k8s-watcher
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/root/src \
        $BENV_IMAGE \
        ./build.sh k8s-watcher

  build-run-unit-tests:
    name: build-run-unit-tests
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: run unit tests
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/root/src \
        $BENV_IMAGE \
        ./build.sh unit_tests test

  build-run-unit-tests-with-asan-and-debug-flags:
    name: build-run-unit-tests-with-asan-and-debug-flags
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: build unit tests with asan and debug flags on then run all tests
      run: |
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC_ROOT=/root/src \
        $BENV_IMAGE \
        ./build.sh --debug --asan unit_tests test

  run-kernel-header-tests:
    name: run-kernel-header-tests
    needs: [clang-format-check]
    runs-on: macos-12
    env:
      EBPF_NET_SRC_ROOT: ${{ github.workspace }}
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          kernel:
            - 'collector/kernel/**'
            - 'channel/**'
            - 'common/**'
            - 'cmake/**'
            - 'config/**'
            - 'ext/**'
            - 'geoip/**'
            - 'jitbuf/**'
            - 'platform/**'
            - 'render/**'
            - 'renderc/**'
            - 'scheduling/**'
            - 'util/**'
          github:
            - '.github/**'

    - name: Run kernel headers test for multiple linux distributions
      id: run-kernel-header-tests
      if: steps.changes.outputs.kernel == 'true' || steps.changes.outputs.github == 'true'
      run: |
        sudo spctl --add /usr/local/bin/brew
        brew install podman
        sudo spctl --add /usr/local/bin/podman
        poman machine init --rootful
        podman machine start
        podman pull $BENV_IMAGE
        podman container run -dt -p 5000:5000 --name registry docker.io/library/registry:2
        
        podman run -t --rm \
        --mount type=bind,source=$PWD,destination=/root/src,readonly \
        --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \
        --env EBPF_NET_SRC_ROOT=/root/src \
        --name benv \
        --privileged \
        quay.io/splunko11ytest/network-explorer-debug/build-env:latest \
        ./build.sh reducer-docker-registry kernel-collector-docker
        
        reducer_image=reducer:${{ needs.clang-format-check.outputs.date }}-${{github.event.pull_request.head.ref}}-${GITHUB_SHA:0:7}
        docker tag reducer:latest localhost:5000/$reducer_image
        kernel_collector_image=kernel-collector:${{ needs.clang-format-check.outputs.date }}-${{github.event.pull_request.head.ref}}-${GITHUB_SHA:0:7}
        docker tag kernel-collector:latest localhost:5000/$kernel_collector_image
        
        docker push localhost:5000/$reducer_image
        docker push localhost:5000/$kernel_collector_image
        
        ./test/kernel-headers/run-tests.sh ${{ needs.clang-format-check.outputs.date }}-${{github.event.pull_request.head.ref}}-${GITHUB_SHA:0:7}
